===============
1
findLCA(BTNode root, BTNode n1, BTNode n2) {}
Algo:
a.
i. Traverse from root to n1, put the path in an array a1.
ii. Traverse from root to n2, put the path in a2.
iii. Find the first index where a1 and a2 unmatch, return its previous index value.
b.
i. Recursively find lca of node.left and node.right. If neither of them is null, node is lca
ii. Otherwise, return whichever is non-null among rightlca and leftlca.
===============
2
AllSubstrings
private void findAllSubstrings(char[] input) {
        String word = new String(input);
        for (int from = 0; from < word.length(); from++) {
            for (int to = from + 1; to <= word.length(); to++) {
                allSubstrings.add(word.substring(from, to));
            }
        }
    }
===============
3
Simple String Search
for(i = 0; i < haystack.length; i++) {
            for(j =0; j < needle.length; j++) {
                if(haystack[i+j] != needle[j]) {
                    break;
                }
            }
            if(j == needle.length)
                return i;
        }
================
4
Find Path in a BT (not BST)
List<BTNode> path = new ArrayList<>();
    public Boolean findPath(BTNode root, BTNode node, List<BTNode> path) {
        if(root == null)
            return false;
        path.add(root);
        if(root.equals(node)) {
            return true;
        }
        if((root.left != null && findPath(root.left, node, path))
            || (root.right != null && findPath(root.right, node, path))) {
            return true;
        }
        path.remove(path.size()-1);
        return false;
    }
=================
5
WrapAroundString
Algo:
a. Use DP;
i. Find max length of sequential characters for each alphabet
=================
6
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Algo:
Push numbers into a stack while checking for descreasing order
https://leetcode.com/problems/remove-k-digits/
=================
7
Remove duplicates in-place
Code:
int removeDuplicates(int A[], int n) {
        if(n < 2) return n;
        int id = 1;
        for(int i = 1; i < n; ++i)
            if(A[i] != A[i-1]) A[id++] = A[i];
        return id;
    }
=================
8
MinimumSubArrayLength greater than a given sum
Algo:
a.
i. Keep accumulation while the sum is >= given sum
ii. Then keep deleting one element and update the minimum count
Code:
int sum = 0, from = 0, min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            System.out.println("---");
            System.out.println("i is " + i);
            System.out.println("sum is " + sum);
            while (sum >= s) {
                System.out.println("sum is > s at " + sum);
                min = Math.min(min, i - from + 1);
                sum -= nums[from++];
            }
            System.out.println("min is " + min);
            System.out.println("---");
        }
        return (min == Integer.MAX_VALUE) ? 0 : min;
====================
9
hIndex calculation
Algo:
a.
i. O(n) space - keep increasing the value at count[i] when there's an i in the input array
ii. Then keep adding the counts from the end of the count array
iii. Return i where a[i] is >= i
====================
10
max lenght of words in an array that don't share common letters
Algo:
a.
i. O(n^2) - give a unique number to each string
ii. AND those strings and find max product
====================
11
Max product of contiguous elements in an array
Algo:
a.
i. For every element as you traverse, capture max and min at the point.
ii. If the element is negative, make max its previous min and min the previous max with different sign.
Code:
for(int i:input) {
            if(isFirstElement) {
                isFirstElement = false;
                continue;
            }
            if(i >= 0) {
                maxEndingHere = Math.max(i, maxEndingHere * i);
                minEndingHere = Math.min(i, minEndingHere * i);
            }
            else {
                int temp = maxEndingHere;
                maxEndingHere = Math.max(i, minEndingHere * i);
                minEndingHere = Math.min(i, temp * i);
            }
        maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
======================
12
Rotate matrix by
Algo
a.
O(n^2) time and O(1) space algorithm ( without any workarounds and hanky-panky stuff! )
Rotate by +90:

Transpose
Reverse each row
Rotate by -90:

Method 1 :

Transpose
Reverse each column
Method 2 :

Reverse each row
Transpose
Rotate by +180:

Method 1: Rotate by +90 twice

Method 2: Reverse each row and then reverse each column (Transpose)

Rotate by -180:

Method 1: Rotate by -90 twice

Method 2: Reverse each column and then reverse each row

Method 3: Rotate by +180 as they are same
==========================================
